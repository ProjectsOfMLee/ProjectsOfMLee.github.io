import { Client as e, createRequest as u } from "@urql/core";

export * from "@urql/core";

import { isRef as r, ref as n, provide as t, getCurrentInstance as a, inject as o, reactive as i, watchEffect as l, onBeforeUnmount as s, onMounted as v } from "vue";

import { subscribe as c, onEnd as f, toPromise as p, map as d, take as y } from "wonka";

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var u = 1; u < arguments.length; u++) {
      var r = arguments[u];
      for (var n in r) {
        if (Object.prototype.hasOwnProperty.call(r, n)) {
          e[n] = r[n];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

function provideClient(u) {
  var a;
  if (!r(u)) {
    a = n(u instanceof e ? u : new e(u));
  } else {
    a = u;
  }
  t("$urql", a);
  return a.value;
}

function install(u, t) {
  var a;
  if (!r(t)) {
    a = n(t instanceof e ? t : new e(t));
  } else {
    a = t;
  }
  u.provide("$urql", a);
}

function useClient() {
  if ("production" !== process.env.NODE_ENV && !a()) {
    throw new Error("use* functions may only be called during the `setup()` or other lifecycle hooks.");
  }
  var e = o("$urql");
  if ("production" !== process.env.NODE_ENV && !e) {
    throw new Error("No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?");
  }
  return e;
}

function unwrapPossibleProxy(e) {
  return e && r(e) ? e.value : e;
}

var x = {
  flush: "pre"
};

function useQuery(e) {
  return callUseQuery(e);
}

function callUseQuery(e, t, a) {
  if (void 0 === t) {
    t = useClient();
  }
  if (void 0 === a) {
    a = [];
  }
  var o = i(e);
  var s = n();
  var v = n(!1);
  var h = n(!1);
  var b = n();
  var w = n();
  var P = n();
  var Q = r(e.pause) ? e.pause : n(!!e.pause);
  var S = n(u(o.query, unwrapPossibleProxy(o.variables)));
  var q = n();
  a.push(l((function() {
    var e = u(o.query, unwrapPossibleProxy(o.variables));
    if (S.value.key !== e.key) {
      S.value = e;
    }
  }), x));
  a.push(l((function() {
    q.value = !Q.value ? t.value.executeQuery(S.value, _extends({}, {
      requestPolicy: o.requestPolicy
    }, o.context)) : void 0;
  }), x));
  var E = {
    data: s,
    stale: v,
    error: b,
    operation: w,
    extensions: P,
    fetching: h,
    isPaused: Q,
    executeQuery: function executeQuery(e) {
      q.value = t.value.executeQuery(S.value, _extends({}, {
        requestPolicy: o.requestPolicy
      }, o.context, e));
      return m;
    },
    pause: function pause() {
      Q.value = !0;
    },
    resume: function resume() {
      Q.value = !1;
    }
  };
  a.push(l((function(e) {
    if (q.value) {
      h.value = !0;
      v.value = !1;
      e(c((function(e) {
        s.value = e.data;
        v.value = !!e.stale;
        h.value = !1;
        b.value = e.error;
        w.value = e.operation;
        P.value = e.extensions;
      }))(f((function() {
        h.value = !1;
        v.value = !1;
      }))(q.value)).unsubscribe);
    } else {
      h.value = !1;
      v.value = !1;
    }
  }), {
    flush: "sync"
  }));
  var m = _extends({}, E, {
    then: function then(e, u) {
      return (q.value ? p(d((function() {
        return E;
      }))(y(1)(q.value))) : Promise.resolve(E)).then(e, u);
    }
  });
  return m;
}

function useMutation(e) {
  return callUseMutation(e);
}

function callUseMutation(e, r) {
  if (void 0 === r) {
    r = useClient();
  }
  var t = n();
  var a = n(!1);
  var o = n(!1);
  var i = n();
  var l = n();
  var s = n();
  return {
    data: t,
    stale: a,
    fetching: o,
    error: i,
    operation: l,
    extensions: s,
    executeMutation: function executeMutation(n, v) {
      o.value = !0;
      return p(y(1)(r.value.executeMutation(u(e, unwrapPossibleProxy(n)), v || {}))).then((function(e) {
        t.value = e.data;
        a.value = !!e.stale;
        o.value = !1;
        i.value = e.error;
        l.value = e.operation;
        s.value = e.extensions;
        return e;
      }));
    }
  };
}

var h = {
  flush: "pre"
};

function useSubscription(e, u) {
  return callUseSubscription(e, u);
}

function callUseSubscription(e, t, a, o) {
  if (void 0 === a) {
    a = useClient();
  }
  if (void 0 === o) {
    o = [];
  }
  var s = i(e);
  var v = n();
  var p = n(!1);
  var d = n(!1);
  var y = n();
  var x = n();
  var b = n();
  var w = n(t);
  var P = r(e.pause) ? e.pause : n(!!e.pause);
  var Q = n(u(s.query, unwrapPossibleProxy(s.variables)));
  var S = n();
  o.push(l((function() {
    var e = u(s.query, unwrapPossibleProxy(s.variables));
    if (Q.value.key !== e.key) {
      Q.value = e;
    }
  }), h));
  o.push(l((function() {
    S.value = !P.value ? a.value.executeSubscription(Q.value, _extends({}, s.context)) : void 0;
  }), h));
  o.push(l((function(e) {
    if (S.value) {
      d.value = !0;
      e(c((function(e) {
        d.value = !0;
        v.value = void 0 !== e.data ? "function" == typeof w.value ? w.value(v.value, e.data) : e.data : e.data, 
        y.value = e.error;
        b.value = e.extensions;
        p.value = !!e.stale;
        x.value = e.operation;
      }))(f((function() {
        d.value = !1;
      }))(S.value)).unsubscribe);
    } else {
      d.value = !1;
    }
  }), h));
  var q = {
    data: v,
    stale: p,
    error: y,
    operation: x,
    extensions: b,
    fetching: d,
    isPaused: P,
    executeSubscription: function executeSubscription(e) {
      S.value = a.value.executeSubscription(Q.value, _extends({}, s.context, e));
      return q;
    },
    pause: function pause() {
      P.value = !0;
    },
    resume: function resume() {
      P.value = !1;
    }
  };
  return q;
}

function useClientHandle() {
  var e = useClient();
  var u = [];
  s((function() {
    var e;
    while (e = u.shift()) {
      e();
    }
  }));
  var r = {
    client: e.value,
    useQuery: function useQuery(r) {
      return callUseQuery(r, e, u);
    },
    useSubscription: function useSubscription(r, n) {
      return callUseSubscription(r, n, e, u);
    },
    useMutation: function useMutation(u) {
      return callUseMutation(u, e);
    }
  };
  if ("production" !== process.env.NODE_ENV) {
    v((function() {
      _extends(r, {
        useQuery: function useQuery(r) {
          if ("production" !== process.env.NODE_ENV && !a()) {
            throw new Error("`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.");
          }
          return callUseQuery(r, e, u);
        },
        useSubscription: function useSubscription(r, n) {
          if ("production" !== process.env.NODE_ENV && !a()) {
            throw new Error("`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.");
          }
          return callUseSubscription(r, n, e, u);
        }
      });
    }));
  }
  return r;
}

export default install;

export { install, provideClient, useClientHandle, useMutation, useQuery, useSubscription };
//# sourceMappingURL=urql-vue.mjs.map
